/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.bca.toolkit.top.tools.sql.qb;

import com.bca.api.pub.Ret;
import com.bca.db.meta.unit.Meta_SQLElement;
import com.bca.pub.tools.Filetool;
import com.bca.toolkit.top.tools.sql.opt.CodeFactoryOptions;
import java.awt.Point;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import java.awt.Toolkit;
import javax.swing.JFrame;
import java.awt.Image;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;

/**
 *
 * @author ur
 */
public class SQLInputFrm extends JFrame {
    public static String sqlInputTxt;
    public static Map<String, String> inputRecords = new HashMap<String, String>();
    public static String mainName; 
    private QbScene qbScene;
    private Meta_SQLElement sqlInputLabel;
    private String cnAlias;
    private Point p;
    private CodeFactoryOptions opt;
    ArrayList<HashMap<String, String>> recentInputSQLs;
    /**
     * Creates new form SQLInputFrm
     * @param qbScene
     * @param sqlInputLabel
     * @param cnAlias
     * @param p
     */

    public SQLInputFrm(QbScene qbScene, Meta_SQLElement sqlInputLabel, String cnAlias, Point p) {
        this.p = p;
    	this.cnAlias = cnAlias;
    	this.qbScene = qbScene;
    	this.sqlInputLabel = sqlInputLabel;
        initComponents();
        wfinit();
    }
    public SQLInputFrm(){}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        inputRecordBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        sqlInputEditor = new javax.swing.JEditorPane();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        mainNameTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(SQLInputFrm.class, "SQLInputFrm.title_1")); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(SQLInputFrm.class, "SQLInputFrm.jLabel1.text_2")); // NOI18N

        inputRecordBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        inputRecordBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                inputRecordBoxItemStateChanged(evt);
            }
        });
        inputRecordBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputRecordBoxActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setViewportView(sqlInputEditor);

        okButton.setText(org.openide.util.NbBundle.getMessage(SQLInputFrm.class, "SQLInputFrm.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(org.openide.util.NbBundle.getMessage(SQLInputFrm.class, "SQLInputFrm.cancelButton.text")); // NOI18N

        exitButton.setText(org.openide.util.NbBundle.getMessage(SQLInputFrm.class, "SQLInputFrm.exitButton.text")); // NOI18N
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jLabel2.setText(org.openide.util.NbBundle.getMessage(SQLInputFrm.class, "SQLInputFrm.jLabel2.text")); // NOI18N

        mainNameTxt.setText(org.openide.util.NbBundle.getMessage(SQLInputFrm.class, "SQLInputFrm.mainNameTxt.text")); // NOI18N
        mainNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainNameTxtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(okButton)
                                .addGap(36, 36, 36)
                                .addComponent(cancelButton)
                                .addGap(35, 35, 35)
                                .addComponent(exitButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(inputRecordBox, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(mainNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 77, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(inputRecordBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(mainNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cancelButton)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(exitButton)
                            .addContainerGap()))
                    .addComponent(okButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        //保存输入的SQL语句，并调用执行它的程序
        saveSqlInputTxt();
    }//GEN-LAST:event_okButtonActionPerformed

    private void inputRecordBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_inputRecordBoxItemStateChanged
        // 如果下拉列表框选项改变，则编辑窗格中的语句相应改变
        getInputFrmRecords();
    }//GEN-LAST:event_inputRecordBoxItemStateChanged


   
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // 取消输入的SQL语句，编辑窗格将被清空
        cancelSqlInputTxt();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // 退出窗体
        exitFrm();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void inputRecordBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputRecordBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputRecordBoxActionPerformed

    private void mainNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mainNameTxtActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SQLInputFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SQLInputFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SQLInputFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SQLInputFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SQLInputFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JComboBox inputRecordBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mainNameTxt;
    private javax.swing.JButton okButton;
    private javax.swing.JEditorPane sqlInputEditor;
    // End of variables declaration//GEN-END:variables
//保存输入的SQL语句，并调用执行它的程序
    private void saveSqlInputTxt() {
       sqlInputTxt = sqlInputEditor.getText();
       mainName = mainNameTxt.getText();
       if(sqlInputTxt != null && sqlInputTxt.length() != 0){
            sqlInputTxt = sqlInputEditor.getText();
            
            String inputRecord = JOptionPane.showInputDialog("是否保存本次输入便于下次使用？");
            while(true){
                boolean isUseable = true;
                if(inputRecord != null && inputRecord.length() != 0){
       find:        for(HashMap<String, String> inputSQL : recentInputSQLs){
                        for(String str : inputSQL.keySet()){
                            if(str.equals(inputRecord)){
                                isUseable = false;
                                inputRecord = JOptionPane.showInputDialog("该名称已被使用，请换个名称");
                                break find;
                            }
                        }
                    }
                    if(isUseable)
                        break;
                }else{
                    break;
                }
            }
            
            if(inputRecord != null && inputRecord.length() != 0)
                 opt.regInputSQLs(inputRecord, sqlInputTxt);
            Filetool.saveSerializeFile("status" + File.separator + "CodeFact.cfg", opt);
            String SQL = SQLInputFrm.sqlInputTxt;
            //去掉SQL语句中最后一个分号（如果有的话）
            SQL = SQL.trim();   //除去开头和结尾的空白
            if((SQL.lastIndexOf(";")) == SQL.length() - 1)
                SQL = SQL.substring(0, SQL.length() -1);
           sqlInputLabel.wfinit(SQL);
           SQLInputFrm.sqlInputTxt = SQL;
           qbScene.createTableCell_byDND(cnAlias, sqlInputLabel, p, QbNodeType.Query);
       }else{
           showErrInfoFrmSQL("SQL语句不能为空！");
       }
       
    }
    // 取消输入的SQL语句，编辑窗格将被清空
    private void cancelSqlInputTxt() {
       sqlInputEditor.setText("");
    }
//退出窗体
    private void exitFrm() {
       int confirm =  JOptionPane.showConfirmDialog(null, "确定退出该页面吗？");
       if(confirm == 0)
           this.dispose();
    }
private void wfinit() {
    //首先获取CodeFactoryOptions对象，提取其中保存手输SQL的集合，用于初始化SQL输入记录的下拉列表框
    final Ret ret = new Ret();
    opt = (CodeFactoryOptions) Filetool.restoreObjFromSerialzeFile("status" + File.separator + "CodeFact.cfg", ret);
        if (opt == null) {
            opt = new CodeFactoryOptions();
        }
        opt.checkFields();
        recentInputSQLs = opt.getInputSQLs();
    //
        inputRecordBox.removeAllItems();
        inputRecordBox.addItem("");
        sqlInputTxt = new String();
        if(recentInputSQLs.size() > 0){
            for(HashMap<String, String> inputSQL : recentInputSQLs){
                 for(String str : inputSQL.keySet()){
                      inputRecordBox.addItem(str);
                 }
            }
            inputRecordBox.setSelectedIndex(1);
        }

        this.setBounds(420, 200, 900, 480);
        try{
            URL url = this.getClass().getResource("/res/img/Sql_Input_16px.png");
            Image image = Toolkit.getDefaultToolkit().getImage(url);
            this.setIconImage(image);
        }catch(Exception me){
            me.printStackTrace();
        }
        
       // Image image = Toolkit.getDefaultToolkit().getImage("D:/NetBeansProject/Repository/New/norTenSpringboot/BcaToolkit/src/res/img/Sql_Input_16px.png");
        //Image image = Toolkit.getDefaultToolkit().getImage("D:\\NetBeansProject\\Repository\\New\\norTenSpringboot\\BcaToolkit\\src\\res\\img\\Sql_Input_16px.png");
        
    }
// 如果下拉列表框选项改变，则编辑窗格中的语句相应改变
    private void getInputFrmRecords() {
        String str = (String) inputRecordBox.getSelectedItem();
        if(str == null || str.equals(""))
            return;
        for(HashMap<String, String> inputSQL : recentInputSQLs){
            for(String s : inputSQL.keySet()){
                if(s.equals(str)){
                    sqlInputEditor.setText(inputSQL.get(s));
                    return;
                } 
            }
        }
    }
   public void showErrInfoFrmSQL(String showTxt){
       JOptionPane.showMessageDialog(null, showTxt);
   }
}


