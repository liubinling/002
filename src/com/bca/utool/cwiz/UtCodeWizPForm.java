/*
 * NCanvasForm2.java
 *
 * Created on 2008锟斤拷10锟斤拷14锟斤拷, 锟斤拷锟斤拷3:22
 */
package com.bca.utool.cwiz;




import com.bca.pub.tools.Wftool;
import com.bca.pub.wfconst.Const.WfIconType;
//import com.bca.studio.tools.BstudioGlobal;
import com.bca.studio.top.I_NavigateForm;
import com.bca.utool.app.BcaUToolApp;
import javax.swing.SwingUtilities;

/**
 *
 * @author  BCA INC
 */
public class UtCodeWizPForm extends javax.swing.JPanel implements I_NavigateForm {

    private static final UtCodeWizPForm inst = new UtCodeWizPForm();
    final BcaUToolApp app;  // = BcaUToolApp.getApp();
    final com.bca.tools.log.Log log = com.bca.tools.log.LogFactory.getLog();

    /** Creates new form NCanvasForm */
    private UtCodeWizPForm() {
        app = BcaUToolApp.getApp();
        app.getBar().incValue("初始化向导生成器", 1);
        initComponents();
        app.getBar().incValue("装载向导生成器", 1);
        add(UtCWizDockForm.getInst().getRootWindow(), java.awt.BorderLayout.CENTER);

//        this.expButton.setVisible(false);
//        this.impButton.setVisible(false);

        app.getBar().incValue("向导完毕", 1);
//        FlowNavigator nav = FlowNavigator.getInst();
//        nav.setNavigateForm((I_NavigateForm) this);
        this.backwardButton.setText("");
        this.forwardButton.setText("");     // 043186060131 锟斤拷锟斤拷锟斤拷     // 136  jl_jf@126.com
    }

    public static UtCodeWizPForm getInst() {
        return inst;
    }

    public void saveCurrentFlow() {
//        this.saveButtonActionPerformed(null);
    }

//    private void compareScripts(WfFlowBuildRt fb) {
//        FlowScriptTool tool = new FlowScriptTool(fb);
//
////        WfFlowBuildRtTemp fbtemp = new WfFlowBuildRtTemp();
//        try {
////            PropertyUtils.copyProperties(fbtemp, fb);
//////Wftool.
////            fbtemp.setPojo(fb.getPojo());
////            fbtemp.connections = fb.connections;
////            fbtemp.flow = fb.flow;
////            fbtemp.flowPages = fb.flowPages;
////            fbtemp.flowVer = fb.flowVer;
////            fbtemp.nameSerialList.putAll(fb.nameSerialList);
////            fbtemp.nodes = fb.nodes;
////            fbtemp.subjects = fb.subjects;
////
////            String s = fbtemp.createFlowScriptNT();
//            String s = tool.createFlowScript();
//            Filetool.saveStringToTextFile("temp\\newScript.java", s);
//
//            fb.createFlowScript();
//            Filetool.saveStringToTextFile("temp\\oldScript.java", fb.getScript());
//
//            Ostool.runShell(true, ".", Long.MAX_VALUE, null, new StringBuffer(), log, "F:\\sd\\wintools\\Beyond Compare\\Beyond Compare 2\\BC2.exe", "temp\\newScript.java", "temp\\oldScript.java");
//
//        } catch (Exception ex) {
//            log.error(com.bca.pub.tools.Toolfunc.getCallLocation(ex.getStackTrace()) + ":" + ex.getMessage(), ex);
//        }
//
//    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        toolbarPanel = new javax.swing.JPanel();
        flowToolbar = new javax.swing.JToolBar();
        navigateToolbar = new javax.swing.JToolBar();
        backwardButton = new javax.swing.JButton();
        forwardButton = new javax.swing.JButton();
        drawToolbar = new javax.swing.JToolBar();
        selectButton = new javax.swing.JToggleButton();
        connectButton = new javax.swing.JToggleButton();
        drawLabelButton = new javax.swing.JToggleButton();
        newPageButton = new javax.swing.JButton();
        layoutToolbar = new javax.swing.JToolBar();
        alignHorizontalButton = new javax.swing.JButton();
        alignVerticalButton = new javax.swing.JButton();
        spreadHorizontalButton = new javax.swing.JButton();
        spreadVerticalButton = new javax.swing.JButton();
        debugToolbar = new javax.swing.JToolBar();
        runButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        toolbarPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        flowToolbar.setRollover(true);
        toolbarPanel.add(flowToolbar);

        navigateToolbar.setRollover(true);

        backwardButton.setIcon(Wftool.getIcon("backward.gif", WfIconType.Toolbar));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/bca/utool/cwiz/Bundle"); // NOI18N
        backwardButton.setText(bundle.getString("UtCodeWizPForm.backwardButton.text")); // NOI18N
        backwardButton.setEnabled(false);
        backwardButton.setFocusable(false);
        backwardButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backwardButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        backwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backwardButtonActionPerformed(evt);
            }
        });
        navigateToolbar.add(backwardButton);

        forwardButton.setIcon(Wftool.getIcon("forward.gif", WfIconType.Toolbar));
        forwardButton.setText("前进");
        forwardButton.setEnabled(false);
        forwardButton.setFocusable(false);
        forwardButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        forwardButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        forwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardButtonActionPerformed(evt);
            }
        });
        navigateToolbar.add(forwardButton);

        toolbarPanel.add(navigateToolbar);

        drawToolbar.setRollover(true);

        buttonGroup1.add(selectButton);
        selectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bca/studio/images/toolbar/select.gif"))); // NOI18N
        selectButton.setToolTipText("选择"); // NOI18N
        selectButton.setFocusable(false);
        selectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });
        drawToolbar.add(selectButton);

        buttonGroup1.add(connectButton);
        connectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bca/studio/images/toolbar/DrawConnecion.gif"))); // NOI18N
        connectButton.setToolTipText("连接"); // NOI18N
        connectButton.setFocusable(false);
        connectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        connectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });
        drawToolbar.add(connectButton);

        buttonGroup1.add(drawLabelButton);
        drawLabelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bca/studio/images/toolbar/label.gif"))); // NOI18N
        drawLabelButton.setToolTipText("画标签"); // NOI18N
        drawLabelButton.setEnabled(false);
        drawLabelButton.setFocusable(false);
        drawLabelButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        drawLabelButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        drawToolbar.add(drawLabelButton);

        newPageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bca/studio/images/toolbar/FlowPage.gif"))); // NOI18N
        newPageButton.setToolTipText("新建流程页"); // NOI18N
        newPageButton.setEnabled(false);
        newPageButton.setFocusable(false);
        newPageButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newPageButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPageButtonActionPerformed(evt);
            }
        });
        drawToolbar.add(newPageButton);

        toolbarPanel.add(drawToolbar);

        layoutToolbar.setRollover(true);

        alignHorizontalButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bca/studio/images/toolbar/AligneHorizontal.gif"))); // NOI18N
        alignHorizontalButton.setToolTipText("水平对齐"); // NOI18N
        alignHorizontalButton.setFocusable(false);
        alignHorizontalButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alignHorizontalButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alignHorizontalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignHorizontalButtonActionPerformed(evt);
            }
        });
        layoutToolbar.add(alignHorizontalButton);

        alignVerticalButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bca/studio/images/toolbar/AligneVertical.gif"))); // NOI18N
        alignVerticalButton.setToolTipText("垂直对齐"); // NOI18N
        alignVerticalButton.setFocusable(false);
        alignVerticalButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alignVerticalButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alignVerticalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignVerticalButtonActionPerformed(evt);
            }
        });
        layoutToolbar.add(alignVerticalButton);

        spreadHorizontalButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bca/studio/images/toolbar/SpreadHorizontal.gif"))); // NOI18N
        spreadHorizontalButton.setToolTipText("水平拉伸"); // NOI18N
        spreadHorizontalButton.setFocusable(false);
        spreadHorizontalButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        spreadHorizontalButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        spreadHorizontalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spreadHorizontalButtonActionPerformed(evt);
            }
        });
        layoutToolbar.add(spreadHorizontalButton);

        spreadVerticalButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bca/studio/images/toolbar/SpreadVertical.gif"))); // NOI18N
        spreadVerticalButton.setToolTipText("垂直拉伸"); // NOI18N
        spreadVerticalButton.setFocusable(false);
        spreadVerticalButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        spreadVerticalButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        spreadVerticalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spreadVerticalButtonActionPerformed(evt);
            }
        });
        layoutToolbar.add(spreadVerticalButton);

        toolbarPanel.add(layoutToolbar);

        debugToolbar.setRollover(true);

        runButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bca/studio/images/toolbar/start.gif"))); // NOI18N
        runButton.setToolTipText("运行实例"); // NOI18N
        runButton.setFocusable(false);
        runButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        runButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        debugToolbar.add(runButton);

        toolbarPanel.add(debugToolbar);

        add(toolbarPanel, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
//    BcaDrawUtils.getDrawUtils().setDrawState(BcaDrawUtils.DrawState.Select);
}//GEN-LAST:event_selectButtonActionPerformed

private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
//    BcaDrawUtils.getDrawUtils().setDrawState(BcaDrawUtils.DrawState.NodeLink);
}//GEN-LAST:event_connectButtonActionPerformed

private void newPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPageButtonActionPerformed
//    final FlowModel flowModel = BstudioGlobal.getActiveFlowModel();
//    if (flowModel == null) {
//        if (com.bca.pub.cfg.LogSwitch.debugLogEnable) {
//            log.debug("FlowModel锟秸ｏ拷NewFlowPageAction锟斤拷锟斤拷");
//        }
//        return;
//    }
//    // if(true) {
//    // if(!flowModel.canvasPages.isEmpty()) {
//    // Wftool.messageDialog("锟斤拷示", JOptionPane.ERROR_MESSAGE, "锟斤拷前锟芥本只锟斤拷锟?锟斤拷一页");
//    // return ;
//    // }
//    // }
//    I_Validatable validatable = new I_Validatable() {
//
//        @Override
//        public boolean validate(Object obj, int maxTryTimes, int times, Object... args) {
//            boolean b = flowModel.getWfFlowPage((String) obj) == null;
//            if (!b) {
//                Wftool.messageDialogFmt("锟斤拷锟斤拷", JOptionPane.ERROR_MESSAGE, "锟斤拷锟斤拷页锟斤拷<%s>锟窖达拷锟节★拷%s", obj, maxTryTimes == times ? "" : "锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷页锟斤拷");
//            }
//            return b;
//        }
//    };
//
//    String pageName = Wftool.inputDialog("锟斤拷锟斤拷", JOptionPane.QUESTION_MESSAGE, "page", validatable, 3, "锟斤拷锟斤拷锟斤拷页锟斤拷");
//    if (Stringtool.isStringEmpty(pageName)) {
//        return;
//    }
//    flowModel.createCanvasPage(pageName);
}//GEN-LAST:event_newPageButtonActionPerformed

private void alignHorizontalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignHorizontalButtonActionPerformed
//    FlowModel fm = BstudioGlobal.getActiveFlowModel();
//    if (fm == null) {
//        return;
//    }

//    for (FlowCanvas canvas : fm.getCanvasPages().values()) {
//        canvas.aligenHorizontalAction();
//    }
}//GEN-LAST:event_alignHorizontalButtonActionPerformed

private void alignVerticalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignVerticalButtonActionPerformed
//    FlowModel fm = BstudioGlobal.getActiveFlowModel();
//    if (fm == null) {
//        return;
//    }

//    for (FlowCanvas canvas : fm.getCanvasPages().values()) {
//        canvas.aligneVerticalAction();
//    }
}//GEN-LAST:event_alignVerticalButtonActionPerformed

private void spreadHorizontalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spreadHorizontalButtonActionPerformed
//    FlowModel fm = BstudioGlobal.getActiveFlowModel();
//    if (fm == null) {
//        return;
//    }

//    for (FlowCanvas canvas : fm.getCanvasPages().values()) {
//        canvas.spreadHorizontalAction();
//    }
}//GEN-LAST:event_spreadHorizontalButtonActionPerformed

private void spreadVerticalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spreadVerticalButtonActionPerformed
//    FlowModel fm = BstudioGlobal.getActiveFlowModel();
//    if (fm == null) {
//        return;
//    }
//
//    for (FlowCanvas canvas : fm.getCanvasPages().values()) {
//        canvas.spreadVerticalAction();
//    }
}//GEN-LAST:event_spreadVerticalButtonActionPerformed

private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
//    if (!app.checkBweClientReady()) {
//        JOptionPane.showMessageDialog(app.getMainFrame(), "锟斤拷锟接癸拷锟斤拷锟斤拷锟斤拷锟斤拷失锟杰★拷\n锟斤拷确锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟街撅拷锟较癸拷锟较★拷", "失锟斤拷", JOptionPane.ERROR_MESSAGE);
//        return;
//    }
//
//    // if (inArgsValueOnDebugDialog == null || fvb !=
//    // app.getWorkSpace().fvb) {
//    // inArgsValueOnDebugDialog = new
//    // InArgsValueOnDebugDialog(app.getMainFrame(), "锟斤拷锟斤拷锟斤拷锟?, true);
//    // inArgsValueOnDebugDialog.wfInit();
//    // fvb = app.getWorkSpace().fvb;
//    // }
//    if (app.getBStudioConfig().getDebugConfig().alwaysOpenArgInputDialog) {
//        InArgsValueOnDebugDialog inArgsValueOnDebugDialog = new InArgsValueOnDebugDialog(app.getMainFrame(), true);
//        inArgsValueOnDebugDialog.wfInit();
//        // fvb = app.getWorkingWfFlowBuild();
//        inArgsValueOnDebugDialog.setBounds(app.getCenterBounds(502, 394));
//        inArgsValueOnDebugDialog.setVisible(true);
//    }
//    WfFlowBuildRt fvb = app.getWorkingWfFlowBuild();
//    if (fvb == null) {
//        Wftool.messageDialog("锟斤拷锟斤拷锟斤拷锟斤拷", JOptionPane.ERROR_MESSAGE, "未锟斤拷锟轿猴拷锟斤拷锟教★拷\n注锟斤拷锟斤拷锟斤拷锟斤拷锟教ｏ拷锟斤拷要锟饺达拷锟斤拷锟教ｏ拷然锟斤拷锟斤拷锟斤拷锟叫★拷");
//        return;
//    }
//    StringBuffer instID = new StringBuffer();
//    WfProperties inArgsBuffer = app.getBStudioConfig().getDebugConfig().loadArgInput(fvb.getFlowId(), fvb.getInArgsNode().properties); // inArgsValueOnDebugDialog.inArgsBuffer;
//
////    if (com.bca.pub.cfg.LogSwitch.debugLogEnable) log.debug("###### inArgsBuffer: %s", inArgsBuffer.asXML());
//    // int instID = inArgsValueOnDebugDialog.instNameField.getText().trim();
//
//    StringBuffer errInfo = new StringBuffer();
//    List<String> failedVarList = new ArrayList<String>();
//    int instId = app.getBweClientApi().createTopInstance(fvb.getFlowId(), 0, Numtool.parseInt(instID, 0), inArgsBuffer, failedVarList, errInfo);
//    if (instId > 0) {
//        String s = String.format("锟斤拷锟斤拷实锟斤拷晒锟?实锟斤拷id:<%d>\n%s", instId, errInfo.toString());
//        Wftool.messageDialog("锟斤拷息", JOptionPane.INFORMATION_MESSAGE, s);
//    } else {
//        String s = String.format("锟斤拷锟斤拷实锟斤拷失锟斤拷. 锟斤拷息:\n%s", errInfo.toString());
//        Wftool.messageDialog("锟斤拷息", JOptionPane.ERROR_MESSAGE, s);
//    }
}//GEN-LAST:event_runButtonActionPerformed

private void backwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backwardButtonActionPerformed
//    FlowNavigator n = FlowNavigator.getInst();
//    FlowModel fm = BstudioGlobal.getActiveFlowModel();
//    String nflowName = n.backword(fm.getFlow() == null ? "" : fm.getFlow().getFlowName());
//    if (nflowName == null || nflowName.length() == 0) {
//        Wftool.messageDialog(false, "锟斤拷锟斤拷栈锟秸★拷没锟斤拷锟斤拷锟教可打开★拷");
//        return;
//    }
//    fm.startWorkSpace(nflowName, 0, true, true);
}//GEN-LAST:event_backwardButtonActionPerformed

private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardButtonActionPerformed
//    FlowNavigator n = FlowNavigator.getInst();
//    FlowModel fm = BstudioGlobal.getActiveFlowModel();
//    String nflowName = n.forword(fm.getFlow() == null ? "" : fm.getFlow().getFlowName());
//    if (nflowName == null || nflowName.length() == 0) {
//        Wftool.messageDialog(false, "锟斤拷锟斤拷栈锟秸★拷没锟斤拷锟斤拷锟教可打开★拷");
//        return;
//    }
//    fm.startWorkSpace(nflowName, 0, true, true);
}//GEN-LAST:event_forwardButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton alignHorizontalButton;
    private javax.swing.JButton alignVerticalButton;
    private javax.swing.JButton backwardButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JToggleButton connectButton;
    private javax.swing.JToolBar debugToolbar;
    private javax.swing.JToggleButton drawLabelButton;
    private javax.swing.JToolBar drawToolbar;
    private javax.swing.JToolBar flowToolbar;
    private javax.swing.JButton forwardButton;
    private javax.swing.JToolBar layoutToolbar;
    private javax.swing.JToolBar navigateToolbar;
    private javax.swing.JButton newPageButton;
    private javax.swing.JButton runButton;
    private javax.swing.JToggleButton selectButton;
    private javax.swing.JButton spreadHorizontalButton;
    private javax.swing.JButton spreadVerticalButton;
    private javax.swing.JPanel toolbarPanel;
    // End of variables declaration//GEN-END:variables
    private boolean messageOnSuccess = true;
    private boolean saveSuccess = false;
    private boolean makeSuccess = false;

    @Override
    public void setBackwordEnable(boolean enable) {
        this.backwardButton.setEnabled(enable);
//        SwingUtilities.updateComponentTreeUI(this);
        this.updateUI();
    }

    @Override
    public void setForwardEnable(boolean enable) {
        this.forwardButton.setEnabled(enable);
        this.updateUI();
//        SwingUtilities.updateComponentTreeUI(this);
    }

//    String backwardTip = "";
//    String farwardTip = "";
    @Override
    public void setBackwordTip(String tip) {
//        backwardTip = tip;
        this.backwardButton.setToolTipText(tip);
    }

    @Override
    public void setForwordTip(String tip) {
        this.forwardButton.setToolTipText(tip);
    }

    @Override
    public void updateToolbarUI() {
        SwingUtilities.updateComponentTreeUI(navigateToolbar);
    }
}