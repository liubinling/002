/*//GEN-FIRST:event_factOptionsButtonActionPerformed
 * PojoCreatePanel.java//GEN-LAST:event_factOptionsButtonActionPerformed
 *
 * Created on 2007年8月3日, 上午10:24
 */
package com.bca.toolkit.top.tools.sql;

import com.bca.pub.tools.Layouttool;
import com.bca.pub.tools.Stringtool;
import com.bca.pub.tools.Wftool;
import com.bca.toolkit.app.BcaToolkitFcSwitch;
import com.bca.toolkit.app.BcaToolkit;
import com.bca.toolkit.top.tools.sql.impl.bonc2017.Cf_Bonc2017OptionDialog;
import com.bca.toolkit.top.tools.sql.impl.bonc2017.Creator_4_Bonc2017;
import com.bca.toolkit.top.tools.sql.impl.bonc2017.FactoryUiSwitch_Bonc2017;
import com.bca.toolkit.top.tools.sql.impl.bonc2017.FactoryUiTool_Bonc2017;
import com.bca.toolkit.top.tools.sql.impl.boncEpmUI.Cf_BoncEpmUIOptionDialog;
import com.bca.toolkit.top.tools.sql.impl.boncEpmUI.Creator_4_BoncEpmUI;
import com.bca.toolkit.top.tools.sql.impl.boncEpmUI.FactoryUiSwitch_BoncEpmUI;
import com.bca.toolkit.top.tools.sql.impl.boncEpmUI.FactoryUiTool_BoncEpmUI;
import com.bca.toolkit.top.tools.sql.impl.boncLink.Cf_BoncLinkOptionDialog;
import com.bca.toolkit.top.tools.sql.impl.boncLink.Creator_4_BoncLink;
import com.bca.toolkit.top.tools.sql.impl.boncLink.FactoryUiSwitch_BoncLink;
import com.bca.toolkit.top.tools.sql.impl.boncLink.FactoryUiTool_BoncLink;
import com.bca.toolkit.top.tools.sql.impl.boncT.Cf_BoncTOptionDialog;
import com.bca.toolkit.top.tools.sql.impl.boncT.Creator_4_BoncT;
import com.bca.toolkit.top.tools.sql.impl.boncT.FactoryUiSwitch_BoncT;
import com.bca.toolkit.top.tools.sql.impl.boncT.FactoryUiTool_BoncT;
import com.bca.toolkit.top.tools.sql.impl.hk.Cf_HxhkOptionDialog;
import com.bca.toolkit.top.tools.sql.impl.hk.Creator_4_HxhkFrame;
import com.bca.toolkit.top.tools.sql.impl.hk.FactoryUiSwitch_Hxhk;
import com.bca.toolkit.top.tools.sql.impl.hk.FactoryUiTool_Hxhk;
import com.bca.toolkit.top.tools.sql.qb.BcaTool_QueryBuilderPanel;
import com.bca.toolkit.top.tools.sql.qb.QbDockForm;
import com.bca.toolkit.top.tools.sql.qb.QbTNodeMenu;
import com.bca.utool.cwiz.CWizDbresForm;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.net.URL;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JOptionPane;

/**
 *
 * @author pxz
 */
public class BcaTool_SqlBuilderTopForm extends javax.swing.JPanel {

    /**
     * @return the isDirectlyCopyFiles
     */
    public static boolean isIsDirectlyCopyFiles() {
        return isDirectlyCopyFiles;
    }

    /**
     * @param aIsDirectlyCopyFiles the isDirectlyCopyFiles to set
     */
    public static void setIsDirectlyCopyFiles(boolean aIsDirectlyCopyFiles) {
        isDirectlyCopyFiles = aIsDirectlyCopyFiles;
    }

    /**
     * @return the isDeleteTable
     */
    public boolean isIsDeleteTable() {
        return isDeleteTable;
    }

    /**
     * @param isDeleteTable the isDeleteTable to set
     */
    public void setIsDeleteTable(boolean isDeleteTable) {
        this.isDeleteTable = isDeleteTable;
    }

    public final static com.bca.tools.log.Log log = com.bca.tools.log.LogFactory.getLog();
    final BcaToolkit app = BcaToolkit.getApp();
    private final SqlCreateModel model = new SqlCreateModel(this);
//    DropTarget dropTarget_table;
//    DropTarget dropTarget_tableSP;
    BcaTool_QueryBuilderPanel factoryForm;
    private QbDockForm dockForm;
    private boolean isDeleteTable = false;
    private static boolean isDirectlyCopyFiles = false;   //标识是否直接创建代码文件到目标文件夹

    /**
     * Creates new form PojoCreatePanel
     */
    public BcaTool_SqlBuilderTopForm() {
        initComponents();
        wfinit();
    }

//    private int getIndexOnBox(JComboBox box, Object o) {
//        for (int i = box.getItemCount() - 1; i >= 0; i--) {
//            if (o.equals(box.getItemAt(i))) {
//                return i;
//            }
//        }
//        return -1;
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        selectDbButton = new javax.swing.JButton();
        createSourceButton = new javax.swing.JButton();
        pojoFactoryBox = new javax.swing.JComboBox();
        factOptionsButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        selectDbButton.setText("选择库"); // NOI18N
        selectDbButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDbButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(selectDbButton);

        createSourceButton.setText("创建代码"); // NOI18N
        createSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createSourceButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(createSourceButton);

        pojoFactoryBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pojoFactoryBoxItemStateChanged(evt);
            }
        });
        pojoFactoryBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pojoFactoryBoxActionPerformed(evt);
            }
        });
        jToolBar1.add(pojoFactoryBox);

        factOptionsButton.setText("项目设置");
        factOptionsButton.setFocusable(false);
        factOptionsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        factOptionsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        factOptionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factOptionsButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(factOptionsButton);

        add(jToolBar1, java.awt.BorderLayout.NORTH);
    }// </editor-fold>                        
//创建代码按钮被点击后触发的事件
    private void createSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //首先弹出一个窗体，让用户选择是否直接创建文件到目标项目文件夹
       // int selectResult = JOptionPane.showConfirmDialog(factoryForm, "请选择代码文件部署方式", "部署选择对话框", JOptionPane.OK_CANCEL_OPTION);
        String[] strs={"直接部署", "稍后部署"};
        //创建一个图标
        URL url=this.getClass().getResource("/res/img/filesList.jpg");
        Image image=Toolkit.getDefaultToolkit().createImage(url).getScaledInstance(16, -1, Image.SCALE_DEFAULT);
        Icon icon=new ImageIcon(image);
        int selectResult =JOptionPane.showOptionDialog(factoryForm, "请选择代码文件部署方式", "", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, icon, strs, strs[1]);
        switch (selectResult) {
            case JOptionPane.OK_OPTION:
                setIsDirectlyCopyFiles(true);   //点击OK， 表明要直接部署
                break;
            case JOptionPane.CANCEL_OPTION:
                setIsDirectlyCopyFiles(false);
                break;
            case JOptionPane.CLOSED_OPTION:
                return;  //直接关闭对话框，则不创建代码
            default:
                break;
        }
        model.createSource();
        //    cfgBean.defaultFactory = super.getString("CodeFactory.defaultFactory", "");
        String factName = (String) getPojoFactoryBox().getSelectedItem();
        if (factName == null) {
            factName = "";  
        }
        String s = Stringtool.encodeBinary(factName.getBytes());
        byte[] bb = Stringtool.decodeBinary(s);
        String f2 = new String(bb);
        if (factName.equals(f2)) {
            app.cfg.setProperty("CodeFactory.defaultFactory", s);
            app.cfg.writeFile();
        }
    }                                                    
//“选择库”按钮被点击后触发的事件，将会弹出一个对话框，里面有4个可供选择的数据库
    private void selectDbButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        CWizDbresForm.getInst().selectDB();
    }                                              
//点击工厂下拉列表框pojoFactoryBox后触发的事件
    private void pojoFactoryBoxItemStateChanged(java.awt.event.ItemEvent evt) {                                                
        try {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                activeFactory = knownFactory.get((String) getPojoFactoryBox().getSelectedItem());
                if (activeFactory == null) {   // 第一次事件  f为空
                    return;
                }
                model.setActiveFactory(activeFactory);  // .pojoAttr;
                activeFactory.setSmodel(model);

                if (factoryForm != null) {
                    factoryForm.setSqlCreateModel(model);
                    dockForm.onSelect(activeFactory);
                }
            }
        } catch (Exception ex) {
            log.error(com.bca.pub.tools.Toolfunc.getCallLocation(ex.getStackTrace()) + ":" + ex.getMessage(), ex);
        } finally {
//            SwingUtilities.updateComponentTreeUI(pojoFactPanel);
        }
    }                                               

private void factOptionsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
//    if (model.pojoAttr == null) {
//        return;
//    }
    if (activeFactory == null) {   // 第一次事件  f为空
        return;
    }

//    String fact = (String) pojoFactoryBox.getSelectedItem();
//    // 按照要根据fact来进行。先放放....
//    Cf_ShFactoryOptionDialog dlg = new Cf_ShFactoryOptionDialog();
    //点击工厂选项按钮后，弹出“BCA代码工厂--选项”对话框（×××框架）
    I_FactoryOptDlg dlg = activeFactory.optDialog;
    dlg.loadOptions(activeFactory);
//    dlg.setPkgName(activeFactory.pojoAttr.packageName);
//    dlg.setJspPath(activeFactory.pojoAttr.extendProperties.getProperty("jspPath"));
    dlg.setBounds(Layouttool.getCenterBounds(dlg.getPreferredSize()));
    dlg.setVisible(true);
    
    //把“BCA代码工厂--选项”对话框中输入的参数值赋给pojoAttr
        model.activeFactory.pojoAttr = dlg.getPojoAttribute();
    //    model.jspPath = dlg.getJspPath();
    //刷新一下SQL预览，将用户在项目设置中输入的信息更新到预览中
    refreshSqlPreview(false);

}                                                 

    private void pojoFactoryBoxActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    // Variables declaration - do not modify                     
    javax.swing.JButton createSourceButton;
    javax.swing.JButton factOptionsButton;
    javax.swing.JToolBar jToolBar1;
    javax.swing.JComboBox pojoFactoryBox;
    javax.swing.JButton selectDbButton;
    // End of variables declaration                   
    final Map<String, SrcFactoryBean> knownFactory = new LinkedHashMap<String, SrcFactoryBean>();
    SrcFactoryBean activeFactory = null;
//初始化显示不同框架名称的下拉列表框pojoFactoryBox
    private void wfinit() {
        knownFactory.put("BONCT",new SrcFactoryBean("BONCT",new Creator_4_BoncT(), new Cf_BoncTOptionDialog(), new FactoryUiSwitch_BoncT(), new FactoryUiTool_BoncT()));
        knownFactory.put("BONCLink",new SrcFactoryBean("BONCLink",new Creator_4_BoncLink(), new Cf_BoncLinkOptionDialog(), new FactoryUiSwitch_BoncLink(), new FactoryUiTool_BoncLink()));
        knownFactory.put("BONC2017", new SrcFactoryBean("BONC2017", new Creator_4_Bonc2017(), new Cf_Bonc2017OptionDialog(), new FactoryUiSwitch_Bonc2017(), new FactoryUiTool_Bonc2017()));
        //knownFactory.put("翰科H5框架", new SrcFactoryBean("翰科H5框架", new Creator_4_Hkh5Frame(), new Cf_Hkh5OptionDialog(), new FactoryUiSwitch_Hkh5(), new FactoryUiTool_Hkh5()));
        knownFactory.put("翰科框架", new SrcFactoryBean("翰科框架", new Creator_4_HxhkFrame(), new Cf_HxhkOptionDialog(), new FactoryUiSwitch_Hxhk(), new FactoryUiTool_Hxhk()));
        //knownFactory.put("DB代码片段", new SrcFactoryBean("DB代码片段", new Creator_4_DbwizFrame(), new Cf_DbwizOptionDialog(), new FactoryUiSwitch_Dbwiz(), new FactoryUiTool_Dbwiz()));
       // knownFactory.put("QueryBuilder", new SrcFactoryBean("QueryBuilder", new SqlSourceCreator_4_Query(), new Cf_ShFactoryOptionDialog(), new FactoryUiSwitch_Qry(), new FactoryUiTool_Qry()));
       // knownFactory.put("国信框架", new SrcFactoryBean("国信框架", new Creator_4_GuoxinFrame(), new Cf_GuoXinOptionDialog(), new FactoryUiSwitch_GuoXin(), new FactoryUiTool_GuoXin())); // new Creator_4_ShangRuanFrame());
       // knownFactory.put("首亨框架", new SrcFactoryBean("首亨框架", new Creator_4_ShouHenFrame(), new Cf_ShFactoryOptionDialog(), new FactoryUiSwitch_ShouHen(), new FactoryUiTool_ShouHen())); // new Creator_4_ShouHenFrame());
       // knownFactory.put("BcaJTable", new SrcFactoryBean("BcaJTable", new Creator_4_Bcajt(), new Cf_BcajtOptionDialog(), new FactoryUiSwitch_Bcajt(), new FactoryUiTool_Bcajt())); // new Creator_4_ShangRuanFrame());
        knownFactory.put("BONCEpmUI", new SrcFactoryBean("BONCEpmUI", new Creator_4_BoncEpmUI(), new Cf_BoncEpmUIOptionDialog(), new FactoryUiSwitch_BoncEpmUI(), new FactoryUiTool_BoncEpmUI()));
        //
        getPojoFactoryBox().addItem("");
        //
        //        CardLayout cl = (CardLayout) pojoFactPanel.getLayout();
        //
//        pojoFactPanel.add(new JPanel(), "");
        //为下拉列表框添加框架名称作为可选项目
        for (String s : knownFactory.keySet()) {
            this.getPojoFactoryBox().addItem(s);
            // pojoFactPanel.add((JComponent) knownFactory.get(s), s);
        }
        /* 添加一个面板BcaTool_QueryBuilderPanel，它采用Border布局，在最上方有一个文本框JTextField，
        文本框显示的内容为“QueryBuilder”*/
        
        factoryForm = new BcaTool_QueryBuilderPanel(this);
        dockForm = factoryForm.getDockForm();
        add((JComponent) factoryForm, java.awt.BorderLayout.CENTER);
        // 
        getPojoFactoryBox().setSelectedIndex(1);
        //codeFatory在BcaToolkitFcSwitch中的初始化值为false
        if (BcaToolkitFcSwitch.codeFatory) {
//            showCard("QueryBuilder");
            getPojoFactoryBox().setSelectedItem("QueryBuilder");
            selectDbButtonActionPerformed(null);
        }

        String s = app.cfg.getCfgBean().getDefaultFactory();
        byte[] bb = Stringtool.decodeBinary(s);
        String defFact = new String(bb);
        if (knownFactory.containsKey(defFact)) {
            getPojoFactoryBox().setSelectedItem(defFact);
        }
       //自动获取“项目设置”面板类（但不显示页面），初始化pojoAttr，以防止用户忘记设置项目路径，造成信息缺失
       if (activeFactory == null) {   // 第一次事件  f为空
            return;
        }

        //    String fact = (String) pojoFactoryBox.getSelectedItem();
        //    // 按照要根据fact来进行。先放放....
        //    Cf_ShFactoryOptionDialog dlg = new Cf_ShFactoryOptionDialog();
            //点击工厂选项按钮后，弹出“BCA代码工厂--选项”对话框（×××框架）
            I_FactoryOptDlg dlg = activeFactory.optDialog;
            dlg.loadOptions(activeFactory);
        //    dlg.setPkgName(activeFactory.pojoAttr.packageName);
        //    dlg.setJspPath(activeFactory.pojoAttr.extendProperties.getProperty("jspPath"));
           // dlg.setBounds(Layouttool.getCenterBounds(dlg.getPreferredSize()));
            dlg.setVisible(false);
            dlg.setProjectInfo();

    }

    public void reloadORM() {
        if (factoryForm != null) {
            factoryForm.reloadSqlScene();
        }
    }

    public I_SqlCreator getSourceCreator() {
        //  new PojoSourceCreator_4_Hibernate(sourceUnits);
        I_SqlCreator c = factoryForm == null ? null : factoryForm.getSourceCreator();

        return c;
    }

//    private void showCard(String card) {
//        CardLayout cl = (CardLayout) pojoFactPanel.getLayout();
//        cl.show(pojoFactPanel, card);
//    }
    /**
     * @return the model
     */
    public SqlCreateModel getModel() {
        return model;
    }

    public void refreshSqlPreview(final boolean refillSqlModel) {    //该方法需要经过好几个类才能到达，并且所起的线程会
                                                                     //重复调用多次，因此不再使用，用另一个方法QbRight.refreshSQLPreview()代替
       /* Wftool.invokeLater(new Runnable() {

            @Override
            public void run() {
                synchronized (model) {
                    if (refillSqlModel) {
                        if (factoryForm != null) {
                            //     factoryForm.refillSqlModel();   将图形复位了？ 
                        }
                    }
                    String sql = model.createSQL();
                    if(QbTNodeMenu.isIsDeleteTable())   //如果正在删除表格，将sql置空，使SQL预览清空
                        sql = "";
                    if (factoryForm != null) {
                        factoryForm.refreshSqlPreview(sql);
                        
                    }
                }
            }
        });*/

    }

	public javax.swing.JComboBox getPojoFactoryBox() {
		return pojoFactoryBox;
	}

	public void setPojoFactoryBox(javax.swing.JComboBox pojoFactoryBox) {
		this.pojoFactoryBox = pojoFactoryBox;
	}
//设置SQL预览区域的可编辑性
    public void setSqlPreviewState(boolean b) {
        if (factoryForm != null) {
            factoryForm.setSqlPreviewState(b);
         }
    }
//保存SQL预览内容
    public String getSqlPreview() {
        return factoryForm.getSqlPreview();
    }
}
