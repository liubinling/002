/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bca.toolkit.top.tools.sql.impl.util.w;

import com.bca.api.pub.Ret;
import com.bca.pub.gui.WfTreeCellRender;
import com.bca.pub.gui.WfTreeNode;
import com.bca.pub.gui.util.TransferableHashMap;
import com.bca.pub.tools.Filetool;
import com.bca.pub.tools.Systool;
import com.bca.pub.tools.Wftool;
import com.bca.toolkit.top.tools.sql.impl.util.UiStylePool;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragGestureRecognizer;
import java.awt.dnd.DragSource;
import java.awt.dnd.DragSourceDragEvent;
import java.awt.dnd.DragSourceDropEvent;
import java.awt.dnd.DragSourceEvent;
import java.awt.dnd.DragSourceListener;
import java.awt.dnd.InvalidDnDOperationException;
import java.io.File;
import java.util.Enumeration;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.jdesktop.swingx.JXTree;

/**
 *
 * @author admin
 */
public class WebUiMemForm extends javax.swing.JPanel implements DragSourceListener, DragGestureListener {

    final com.bca.tools.log.Log log = com.bca.tools.log.LogFactory.getLog();
    final WfTreeNode root = new WfTreeNode(WfTreeNode.TreeNodeType.Branch, "Ò³ÃæÔªËØÄ¿Â¼");
    WebUiTreeModel tm;
//    WebUiMemForm webUiMemForm;
    DragSource dragSource = new DragSource();
    DragGestureRecognizer dragGestureRecognizer = null;

    /**
     * Creates new form WebUiMemForm
     */
    public WebUiMemForm() {
        tm = new WebUiTreeModel(root);
        initComponents();
        wfinit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pop = new javax.swing.JPopupMenu();
        miClone = new javax.swing.JMenuItem();
        miReload = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        editPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtree = new JXTree(tm);
        jToolBar1 = new javax.swing.JToolBar();
        usingModeButton = new javax.swing.JToggleButton();
        designModeButton = new javax.swing.JToggleButton();
        detailButton = new javax.swing.JToggleButton();

        pop.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                popPopupMenuWillBecomeVisible(evt);
            }
        });

        miClone.setText(org.openide.util.NbBundle.getMessage(WebUiMemForm.class, "WebUiMemForm.miClone.text")); // NOI18N
        miClone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCloneActionPerformed(evt);
            }
        });
        pop.add(miClone);

        miReload.setText(org.openide.util.NbBundle.getMessage(WebUiMemForm.class, "WebUiMemForm.miReload.text")); // NOI18N
        miReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miReloadActionPerformed(evt);
            }
        });
        pop.add(miReload);

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(80);
        jSplitPane1.setDividerSize(3);

        editPanel.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setRightComponent(editPanel);

        jtree.setComponentPopupMenu(pop);
        jtree.setRootVisible(false);
        jtree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jtreeValueChanged(evt);
            }
        });
        jtree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtreeKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jtree);

        jSplitPane1.setLeftComponent(jScrollPane2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jToolBar1.setRollover(true);

        buttonGroup1.add(usingModeButton);
        usingModeButton.setSelected(true);
        usingModeButton.setText(org.openide.util.NbBundle.getMessage(WebUiMemForm.class, "WebUiMemForm.usingModeButton.text")); // NOI18N
        usingModeButton.setFocusable(false);
        usingModeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        usingModeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(usingModeButton);

        buttonGroup1.add(designModeButton);
        designModeButton.setText(org.openide.util.NbBundle.getMessage(WebUiMemForm.class, "WebUiMemForm.designModeButton.text")); // NOI18N
        designModeButton.setFocusable(false);
        designModeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        designModeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        designModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                designModeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(designModeButton);

        detailButton.setText(org.openide.util.NbBundle.getMessage(WebUiMemForm.class, "WebUiMemForm.detailButton.text")); // NOI18N
        detailButton.setFocusable(false);
        detailButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        detailButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        detailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(detailButton);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void jtreeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtreeKeyPressed
        if (!designModeButton.isSelected()) {
            return;
        }
//        log.debug("getSource=%s,code=0x%x", evt.getSource(), evt.getKeyCode());
        switch (evt.getKeyCode()) {
            case java.awt.event.KeyEvent.VK_INSERT:
                onInsert();
                break;
            case java.awt.event.KeyEvent.VK_DELETE:
                onDelete();
                break;
        }
    }//GEN-LAST:event_jtreeKeyPressed

    private void jtreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jtreeValueChanged

        WebUiMemBean bean = getSelectionBean();
        if (bean == null) {
            clearEditPanel();
            return;
        }
        WebUiControlForm c = new WebUiControlForm();
        c.loadUiBean(bean);
        c.setWebUiMemForm(this);
        // 
        editPanel.removeAll();
        this.editPanel.add(c, java.awt.BorderLayout.CENTER);
        editPanel.updateUI();


    }//GEN-LAST:event_jtreeValueChanged

    private WebUiMemBean getSelectionBean() {
        TreePath tp = jtree.getSelectionPath();
        if (tp == null) {
            return null;
        }
        WfTreeNode tn = (WfTreeNode) tp.getLastPathComponent();
        if (tn.getTreeNodeType() == WfTreeNode.TreeNodeType.Branch) {
            return null;
        }
        return (WebUiMemBean) tn.getUserObject();
    }

    private void detailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailButtonActionPerformed
        jSplitPane1.setRightComponent(detailButton.isSelected() ? editPanel : null);
    }//GEN-LAST:event_detailButtonActionPerformed

    private void designModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_designModeButtonActionPerformed
        detailButton.setSelected(true);
        detailButtonActionPerformed(null);
    }//GEN-LAST:event_designModeButtonActionPerformed

    private void miCloneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCloneActionPerformed
        WebUiMemBean bean = getSelectionBean();
        if (bean == null) {
            return;
        }

        WebUiMemBean newBean = tm.cloneUiBean(bean);
        if (newBean != null) {
            saveBean('s', newBean, null);
        }
    }//GEN-LAST:event_miCloneActionPerformed

    private void popPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_popPopupMenuWillBecomeVisible
        TreePath tp = jtree.getSelectionPath();
        if (tp == null) {
            this.miClone.setEnabled(false);
            return;
        }
        WfTreeNode tn = (WfTreeNode) tp.getLastPathComponent();
        if (tn.getTreeNodeType() == WfTreeNode.TreeNodeType.Branch) {
            this.miClone.setEnabled(false);
            return;
        }
        this.miClone.setEnabled(true);
    }//GEN-LAST:event_popPopupMenuWillBecomeVisible

    private void miReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miReloadActionPerformed
        this.refrehJTree();
    }//GEN-LAST:event_miReloadActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JToggleButton designModeButton;
    private javax.swing.JToggleButton detailButton;
    private javax.swing.JPanel editPanel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private org.jdesktop.swingx.JXTree jtree;
    private javax.swing.JMenuItem miClone;
    private javax.swing.JMenuItem miReload;
    private javax.swing.JPopupMenu pop;
    private javax.swing.JToggleButton usingModeButton;
    // End of variables declaration//GEN-END:variables

    private void wfinit() {
        root.setClientProperty("dir", "/");
        jtree.setCellRenderer(new WfTreeCellRender());
        this.refrehJTree();
        // 
        detailButton.setSelected(false);
        detailButtonActionPerformed(null);

        dragGestureRecognizer = dragSource.createDefaultDragGestureRecognizer(jtree, DnDConstants.ACTION_COPY, this);
    }

    private void onInsert() {
        WfTreeNode tn;
        TreePath tp = jtree.getSelectionPath();
        if (tp == null) {
            tn = root;
        } else {
            tn = (WfTreeNode) tp.getLastPathComponent();
            if (tn == null) {
                tn = root;
            } else {
                while (tn.getTreeNodeType() != WfTreeNode.TreeNodeType.Branch) {
                    tn = (WfTreeNode) tn.getParent();
                    if (tn == root || tn == null) {
                        break;
                    }
                }
            }
        }
        WebUiControlForm c = new WebUiControlForm();
        WebUiMemBean bean = new WebUiMemBean();
        String pdir = (String) tn.getClientProperty("dir");
        bean.setXpath(pdir);
        c.loadUiBean(bean);
        c.setWebUiMemForm(this);
        // 
        editPanel.removeAll();
        this.editPanel.add(c, java.awt.BorderLayout.CENTER);
        editPanel.updateUI();
    }

    private void onDelete() {
        WfTreeNode tn;
        TreePath tp = jtree.getSelectionPath();
        if (tp == null) {
            return;
        }
        tn = (WfTreeNode) tp.getLastPathComponent();
        if (tn == null) {
            return;
        }
        if (tn.getTreeNodeType() != WfTreeNode.TreeNodeType.Leaf) {
            return;
        }
        this.saveBean('d', (WebUiMemBean) tn.getUserObject(), tn);

//        WebUiMemBean uiBean = (WebUiMemBean) tn.getUserObject();
//        String dir = Systool.getStartDir() + File.separator + "model" + File.separator + "ustyle";
//        String fn = dir + File.separator + "web.hxhk.uistyle";
//
//        Ret r = new Ret();
//        UiStylePool pool = (UiStylePool) Filetool.restoreObjFromSerialzeFile(fn, r);
//        if (pool == null) {
//            pool = new UiStylePool();
//        }
//        pool.getStyles().remove(uiBean.getFullPath());
//        // 
//        Filetool.saveSerializeFile(fn, pool);
//        Wftool.messageDialog(true, "ÒÑ±£´æ:" + fn);
//        tm.removeNodeFromParent(tn);
        tm.nodeStructureChanged(root);
        jtree.expandAll();
    }

    /**
     *
     * @param act 's' - save 'd' = delete
     * @param uiBean
     */
    void saveBean(char act, WebUiMemBean uiBean, WfTreeNode tn) {
//        String dir = Systool.getStartDir() + File.separator + "model" + File.separator + "ustyle";
//        Filetool.createPaths(dir);
//        String fn = dir + File.separator + "web.hxhk.uistyle";
//
//        Ret r = new Ret();
//        UiStylePool pool = (UiStylePool) Filetool.restoreObjFromSerialzeFile(fn, r);
//        if (pool == null) {
//            pool = new UiStylePool();
//        }

        UiStylePool pool = this.loadFromFile();

        switch (act) {
            case 's':
                pool.putWebUiMemBean(uiBean);
                tm.loadMemBean(uiBean);
                break;
            case 'd':
                pool.removeWebUiMemBean(uiBean);
                if (tn != null) {
                    tn.removeFromParent();
                }
                break;
        }
        // 
        Filetool.deleteFile(pool.getFileName() + ".bak");
        Filetool.renameFile(pool.getFileName(), pool.getFileName() + ".bak");
        Filetool.saveSerializeFile(pool.getFileName(), pool);
        // Wftool.messageDialog(true, "ÒÑ±£´æ:" + pool.getFileName());
    }

    private UiStylePool loadFromFile() {
        String dir = Systool.getStartDir() + File.separator + "model" + File.separator + "ustyle";
        Filetool.createPaths(dir);
        String fn = dir + File.separator + "web.hxhk.uistyle";

        Ret r = new Ret();
        UiStylePool pool = (UiStylePool) Filetool.restoreObjFromSerialzeFile(fn, r);
        if (pool == null) {
            pool = new UiStylePool();
        }
        pool.setFileName(fn);
        return pool;
    }

    private void clearEditPanel() {
        editPanel.removeAll();
        editPanel.updateUI();
    }

    @Override
    public void dragEnter(DragSourceDragEvent dsde) {
    }

    @Override
    public void dragOver(DragSourceDragEvent dsde) {
    }

    @Override
    public void dropActionChanged(DragSourceDragEvent dsde) {
    }

    @Override
    public void dragExit(DragSourceEvent dse) {
    }

    @Override
    public void dragDropEnd(DragSourceDropEvent dsde) {
    }

    @Override
    public void dragGestureRecognized(DragGestureEvent dge) {
        try {
            Transferable t = getTransferableObject();
            if (t != null) {
                dragSource.startDrag(dge, DragSource.DefaultCopyDrop, t, this); //_imgGhost, new Point(5, 5), transferable, this);
            }
        } catch (InvalidDnDOperationException ex) {
        }

    }

    private Transferable getTransferableObject() {
        TreePath tp = jtree.getSelectionPath();
        if (tp == null || tp.getLastPathComponent() == null) { //  || !(tp.getLastPathComponent() instanceof WebUiMemBean)) {
            return null;
        }
        WfTreeNode tn = (WfTreeNode) tp.getLastPathComponent();
        if (!(tn.getUserObject() instanceof WebUiMemBean)) {
            return null;
        }
        WebUiMemBean bean = (WebUiMemBean) tn.getUserObject();
        TransferableHashMap<String, WebUiMemBean> datas = new TransferableHashMap<String, WebUiMemBean>("WebUiMemBean");
        datas.put("WebUiMemBean", bean);
        return datas;
    }

    private void refrehJTree() {
        root.removeAllChildren();
        UiStylePool pool = loadFromFile();
        for (WebUiMemBean uiBean : pool.getStyles().values()) {
            tm.loadMemBean(uiBean);
        }
        tm.setPool(pool);
        tm.nodeStructureChanged(root);
        jtree.expandAll();
    }

    class WebUiTreeModel extends DefaultTreeModel {

        private UiStylePool pool;

        public WebUiTreeModel(TreeNode root) {
            super(root);
        }


        private void setPool(UiStylePool pool) {
            this.pool = pool;
        }
//        private void load() {
//        }

        private void loadMemBean(WebUiMemBean uiBean) {
            String xp = uiBean.getXpath();
            WfTreeNode pnode = (WfTreeNode) root;
            for (String dirName : xp.split("/")) {
                if (dirName.isEmpty()) {
                    continue;
                }
                pnode = checkFolder(pnode, dirName);
            }
            WfTreeNode tn = findLeaf(pnode, uiBean);
            if (tn != null) {
                pnode.remove(tn);
            }
            tn = new WfTreeNode(WfTreeNode.TreeNodeType.Leaf, uiBean);
            tn.setDisplayText(uiBean.getStyleName());
            pnode.add(tn);
        }

        private WfTreeNode checkFolder(WfTreeNode pnode, String dirName) {
            Enumeration ch = pnode.children();
            while (ch.hasMoreElements()) {
                WfTreeNode tn = (WfTreeNode) ch.nextElement();
                if (tn.getTreeNodeType() == WfTreeNode.TreeNodeType.Branch) {
                    String s = (String) tn.getUserObject();
                    if (dirName.equals(s)) {
                        return tn;
                    }
                }
            }
            WfTreeNode tn = new WfTreeNode(WfTreeNode.TreeNodeType.Branch, dirName);
            String pdir = (String) pnode.getClientProperty("dir");
            if ("/".equals(pdir)) {
                pdir = "";
            }
            tn.setClientProperty("dir", pdir + '/' + dirName);
            pnode.add(tn);
            return tn;
        }

        private WfTreeNode findLeaf(WfTreeNode pnode, WebUiMemBean uiBean) {
            Enumeration ch = pnode.children();
            while (ch.hasMoreElements()) {
                WfTreeNode tn = (WfTreeNode) ch.nextElement();
                if (tn.getTreeNodeType() == WfTreeNode.TreeNodeType.Leaf) {
                    WebUiMemBean s = (WebUiMemBean) tn.getUserObject();
                    if (uiBean.getStyleName().equals(s.getStyleName())) {
                        return tn;
                    }
                }
            }
            return null;
        }

        private WebUiMemBean cloneUiBean(WebUiMemBean bean) {
            String dir;
            String name;
            while (true) {
                String s = Wftool.inputDialog("ÇëÊäÈëÐÂµÄÄ¿Â¼¼°Ãû³Æ£¨¸ñÊ½:/dir1/dir2/name)", JOptionPane.INFORMATION_MESSAGE, bean.getFullPath(), "ÇëÊäÈëÂ·¾¶:");
                if (s == null) {
                    return null;
                }
                int sepa = s.lastIndexOf("/");
                if (sepa == -1) {
                    dir = "/";
                    name = s;
                } else {
                    dir = s.substring(0, sepa);
                    name = s.substring(sepa + 1);
                }
                boolean b = pool.getStyles().containsKey(name);
                if (b) {
                    Wftool.messageDialog(false, "Ãû³ÆÒÑ´æÔÚ£º" + name + "\n\nÇëÖØÐÂÊäÈë¡£");
                    continue;
                }
                break;
            }
            //
            WebUiMemBean newBean = new WebUiMemBean();
            newBean.setXpath(dir);
            newBean.setStyleName(name);
            // 
            newBean.setCtype(bean.getCtype());
            newBean.setEstyleTemplUnits(bean.getEstyleTemplUnits());
            newBean.setKvMapMode(bean.getKvMapMode());
            newBean.setSqlForKvMap(bean.getSqlForKvMap());
            newBean.setV_label(bean.getV_label());
            newBean.setVarPostfix(bean.getVarPostfix());
            this.loadMemBean(newBean);
            //
            return newBean;
        }
    }
}
