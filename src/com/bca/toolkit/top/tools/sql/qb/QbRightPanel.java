/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bca.toolkit.top.tools.sql.qb;

import com.bca.pub.gui.WideEditorPane;
import com.bca.pub.tools.Wftool;
import com.bca.toolkit.top.tools.sql.SqlCreateModel;
import com.bca.toolkit.top.tools.sql.impl.boncEpmUI.Cf_BoncEpmUIOptionDialog;
import com.bca.toolkit.top.tools.sql.impl.boncEpmUI.QbTablePopDialog_BoncEpmUI;
import com.bca.toolkit.top.tools.sql.impl.qry.SqlSourceCreator_4_Query;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showConfirmDialog;

/**
 *
 * @author ur
 */
public class QbRightPanel extends javax.swing.JPanel {
    private static JEditorPane sqlEditPane;
    private static QbJTable qbJTable;
    private static SqlCreateModel smodel;
    private static boolean isCancel = false;
    /**
     * Creates new form QbRightPanel
     */
    public QbRightPanel() {
        initComponents();
        wfinit();
    }


    /**
     * @return the smodel
     */
    public static SqlCreateModel getSmodel() {
        return smodel;
    }

    /**
     * @param aSmodel the smodel to set
     */
    public static void setSmodel(SqlCreateModel aSmodel) {
        smodel = aSmodel;
    }

    /**
     * @return the sqlEditPane
     */
    public static JEditorPane getSqlEditPane() {
        return sqlEditPane;
    }

    /**
     * @param aSqlEditPane the sqlEditPane to set
     */
    public static void setSqlEditPane(JEditorPane aSqlEditPane) {
        sqlEditPane = aSqlEditPane;
    }

    /**
     * @return the isCancel
     */
    public static boolean isIsCancel() {
        return isCancel;
    }

    /**
     * @param aIsCancel the isCancel to set
     */
    public static void setIsCancel(boolean aIsCancel) {
        isCancel = aIsCancel;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sqlEditButton = new javax.swing.JButton();
        sqlSaveButton = new javax.swing.JButton();
        sqlCancelButton = new javax.swing.JButton();
        sqlPreviewScrollPane = new javax.swing.JScrollPane();
        modelLabel = new javax.swing.JLabel();
        modelNameBox = new javax.swing.JComboBox();

        sqlEditButton.setText(org.openide.util.NbBundle.getMessage(QbRightPanel.class, "QbRightPanel.sqlEditButton.text")); // NOI18N
        sqlEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqlEditButtonActionPerformed(evt);
            }
        });

        sqlSaveButton.setText(org.openide.util.NbBundle.getMessage(QbRightPanel.class, "QbRightPanel.sqlSaveButton.text")); // NOI18N
        sqlSaveButton.setEnabled(false);
        sqlSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqlSaveButtonActionPerformed(evt);
            }
        });

        sqlCancelButton.setText(org.openide.util.NbBundle.getMessage(QbRightPanel.class, "QbRightPanel.sqlCancelButton.text")); // NOI18N
        sqlCancelButton.setEnabled(false);
        sqlCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqlCancelButtonActionPerformed(evt);
            }
        });

        modelLabel.setText(org.openide.util.NbBundle.getMessage(QbRightPanel.class, "QbRightPanel.modelLabel.text")); // NOI18N

        modelNameBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        modelNameBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                modelNameBoxItemStateChanged(evt);
            }
        });
        modelNameBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelNameBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sqlPreviewScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(sqlEditButton)
                        .addGap(18, 18, 18)
                        .addComponent(sqlSaveButton)
                        .addGap(18, 18, 18)
                        .addComponent(sqlCancelButton)
                        .addGap(26, 26, 26)
                        .addComponent(modelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modelNameBox, 0, 140, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sqlEditButton)
                    .addComponent(sqlSaveButton)
                    .addComponent(sqlCancelButton)
                    .addComponent(modelLabel)
                    .addComponent(modelNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(sqlPreviewScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sqlEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sqlEditButtonActionPerformed
        
       /*   if(smodel != null){ 
            if(smodel.activeFactory.pojoAttr.getProperty("fatherFolder").equals("")){
                Wftool.messageDialog(false, "编辑前，请先点击\"工厂选项\"进行设置");
                return;
            }
        }   */
        setSqlPreviewState(true);
        sqlEditButton.setEnabled(false);
        sqlSaveButton.setEnabled(true);
        sqlCancelButton.setEnabled(true);
       // if(qbJTable != null)
       //     qbJTable.refreshSqlPreview(false);
    }//GEN-LAST:event_sqlEditButtonActionPerformed

    private void sqlSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sqlSaveButtonActionPerformed
        //是0， 否1， 取消2
        int flag = showConfirmDialog(null, "确认保存修改吗？", "", JOptionPane.YES_NO_OPTION);
        if(flag != JOptionPane.OK_OPTION)
            return;
        if(qbJTable != null){
            setIsCancel(false);
          /*  SqlCreateModel sm = qbJTable.getScene().getModel().getSqlModel();
            sm.sqlPreview = qbJTable.getSqlPreview(); */
            if(SqlSourceCreator_4_Query.getGetMetaDataFrom().equals("ManuallyTypeSQL"))   //手输SQL的时候才刷新
            //这一句是为了保存修改的内容在SqlPreview_EpmUI中，用于点击取消按钮时恢复上一次保存的状态
                smodel.createSQL();    
        }
        sqlEditButton.setEnabled(true);
        getSqlEditPane().setEditable(false);
        //点击保存后，预览变为不可编辑状态，保存和取消按钮应该设为不可用
        sqlSaveButton.setEnabled(false);
        sqlCancelButton.setEnabled(false);
    }//GEN-LAST:event_sqlSaveButtonActionPerformed

    private void sqlCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sqlCancelButtonActionPerformed
         //是0， 否1
        int flag = showConfirmDialog(null, "确认取消修改吗？","",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(flag != JOptionPane.OK_OPTION)
            return;
        if(qbJTable != null && smodel!=null){
            setIsCancel(true);
            refreshSQLPreview();     //调用本类的刷新SQL预览方法，不再调用以前经历好几层的那些方法，减少bug
           // qbJTable.refreshSqlPreview(false);
        }else{
            getSqlEditPane().setText("");
        }
        sqlEditButton.setEnabled(true);
        getSqlEditPane().setEditable(false);
        //点击取消后，预览变为不可编辑状态，保存和取消按钮应该设为不可用
        sqlSaveButton.setEnabled(false);
        sqlCancelButton.setEnabled(false);
    }//GEN-LAST:event_sqlCancelButtonActionPerformed
//模型名称下拉列表框选项改变
    private void modelNameBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_modelNameBoxItemStateChanged
        modelNameChanged();   
    }//GEN-LAST:event_modelNameBoxItemStateChanged

    private void modelNameBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelNameBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modelNameBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel modelLabel;
    private static javax.swing.JComboBox modelNameBox;
    private javax.swing.JButton sqlCancelButton;
    private javax.swing.JButton sqlEditButton;
    private javax.swing.JScrollPane sqlPreviewScrollPane;
    private javax.swing.JButton sqlSaveButton;
    // End of variables declaration//GEN-END:variables

    private void wfinit() {
        setSqlEditPane(new WideEditorPane());
        getSqlEditPane().setEditable(false);
        sqlPreviewScrollPane.setViewportView(getSqlEditPane());
        //初始化模型名称下拉列表框
        initModelNameBox();
        QbScene.setSqlPreviewPanel(this);    //将自身赋给QbScene作为属性
        QbTNodeMenu.setSqlPreviewPanel(this);  //将自身赋给QbTNodeMenu作为属性
        QbTablePopDialog_BoncEpmUI.setSqlPreviewPanel(this); //将自身赋给QbTablePopDialog_BoncEpmUI（批量开关面板）作为属性
    }
    //设置编辑窗格的可编辑性
    public static void setSqlEditableState(boolean editable){
            getSqlEditPane().setEditable(editable);
    }
    //获取编辑窗格的内容
    public static String getSqlText(){
        return getSqlEditPane().getText();
    }

    //设置SQL预览区域的可编辑性
    private void setSqlPreviewState(boolean b) {
       if(b){
            getSqlEditPane().setEditable(true);
       }else{
            getSqlEditPane().setEditable(false);
       }
    }
    //引入QbJTable
    public static void setQbJTable(QbJTable qbJTable){
        QbRightPanel.qbJTable = qbJTable;
    }

    private void updateJTableUI() {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                qbJTable.updateUI();
            }
        });
    }
 //初始化模型名称下拉列表框
    private void initModelNameBox() {
        modelNameBox.removeAllItems();
        String[] modelNames = {"分页表格", "树状表格", "后端分页增删改查表格", "柱图", "饼图", "线型图", "散点图", "普通表格联动柱图", "雷达图", "仪表盘图"};
        for(String modelName : modelNames){
            modelNameBox.addItem(modelName);
        }
        modelNameBox.setSelectedIndex(0);
    }
    //根据指定的模型名称设置选中项
    public static void setSelectedModelName(){
        String modelCategory = Cf_BoncEpmUIOptionDialog.getModelCategory();
        for(int i =0; i < modelNameBox.getItemCount(); i++){
            String modelName = (String)modelNameBox.getItemAt(i);
            if(modelName.equals(modelCategory))
                modelNameBox.setSelectedItem(modelName);
        } 
    } 
//模型名称下拉列表框选项改变
    private void modelNameChanged() {
       Cf_BoncEpmUIOptionDialog.setModelCategory((String) modelNameBox.getSelectedItem());
        if(qbJTable != null && smodel!=null){
            QbTNodeMenu.setIsDeleteTable(false);  //刷新SQL预览前先取消对删除表格动作事件的标识
            QbRightPanel.setIsCancel(false);  //标识当前不是取消SQL预览编辑
           // qbJTable.refreshSqlPreview(false);
            refreshSQLPreview();
            updateJTableUI();
        }
    }
    //刷新SQL预览
    public void refreshSQLPreview(){
        if(smodel!=null){
                String sql;
                if(!QbTNodeMenu.isIsDeleteTable())
                    sql=smodel.createSQL();
                else
                    sql="";
                final String sqlForPreview=sql;
                java.awt.EventQueue.invokeLater(new Runnable(){
                    @Override
                    public void run() {
                        sqlEditPane.setText(sqlForPreview);
                    }
                });
                updateJTableUI();
            }
    }
   }
