/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QbJXTable.java
 *
 * Created on 2010-10-31, 0:06:58
 */
package com.bca.toolkit.top.tools.sql.qb;

import com.bca.db.meta.I_WfColumn;
import com.bca.db.meta.unit.Meta_Table;
import com.bca.pub.gui.util.TransferableHashMap;
import com.bca.pub.tools.Uitool;
import com.bca.pub.tools.Wftool;
import com.bca.toolkit.app.BcaToolkit;
import com.bca.toolkit.top.tools.sql.SqlCreateModel;
import com.bca.toolkit.top.tools.sql.SrcFactoryBean;
import com.bca.toolkit.top.tools.sql.impl.util.w.WebUiMemBean;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragGestureRecognizer;
import java.awt.dnd.DragSource;
import java.awt.dnd.DragSourceDragEvent;
import java.awt.dnd.DragSourceDropEvent;
import java.awt.dnd.DragSourceEvent;
import java.awt.dnd.DragSourceListener;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.awt.dnd.InvalidDnDOperationException;
import javax.swing.DefaultCellEditor;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import org.jdesktop.swingx.JXTable;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author pxz
 */
public class QbJTable extends JXTable {

    final static com.bca.tools.log.Log log = com.bca.tools.log.LogFactory.getLog();
    private final QbScene scene;
    DragSource dragSource; // = new DragSource();
    DragGestureRecognizer dragGestureRecognizer;
    DropTarget dropTarget;
    static I_ColBatchDlg switchDialog = null;
    final BcaToolkit app;

    /**
     * Creates new form BeanForm
     */
    public QbJTable(QbTable_JTableModel tm, QbScene scene) {
        super(tm);
        app = BcaToolkit.getApp();
        this.scene = scene;
        initComponents();
        wfinit();
        QbRightPanel.setQbJTable(this);    //将自身信息赋给QbTNodeMenu类（表格最上边一行――工具栏）
        QbRightPanel.setSelectedModelName();
    }

    @Override
    public QbTable_JTableModel getModel() {
        return (QbTable_JTableModel) super.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popOnRow = new javax.swing.JPopupMenu();
        miBatch = new javax.swing.JMenuItem();

        popOnRow.setName("popOnRow"); // NOI18N

        miBatch.setText(org.openide.util.NbBundle.getMessage(QbJTable.class, "QbJTable.miBatch.text")); // NOI18N
        miBatch.setName("miBatch"); // NOI18N
        miBatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miBatchActionPerformed(evt);
            }
        });
        popOnRow.add(miBatch);

        setComponentPopupMenu(popOnRow);
        setName("Form"); // NOI18N
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents
    Point lastMouseClickPoint = null;

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

        lastMouseClickPoint = evt.getLocationOnScreen();
        if (SwingUtilities.isRightMouseButton(evt)) {
//            if (popDialog != null) {
//                popDialog.setVisible(false);
//            }
//            SrcFactoryBean fbean = getSqlModel().activeFactory;
//            if (fbean == null) {
//                return;
//            }
//            String s = fbean.creator.getColBatchDlgClass();
//            popDialog = (I_ColBatchDlg) app.getClassPool().getNewInstance(s, new StringBuffer());
//            popDialog.wfinit(this);
//            if (popDialog == null) {
//                return;
//            }
//            popDialog.setLocation(evt.getLocationOnScreen());
//            popDialog.setSize(popDialog.getPreferredSize());
//            popDialog.setVisible(true);
        } else {
            if (switchDialog != null && switchDialog.isVisible()) {
                if (switchDialog.getQbJTable() != this) {
                    // switchDialog.setVisible(false);
                    miBatchActionPerformed(null);
                }
            }
        }
    }//GEN-LAST:event_formMouseClicked

private void miBatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miBatchActionPerformed
    if (switchDialog != null) {
        switchDialog.setVisible(false);
    }
    SrcFactoryBean fbean = getSqlModel().activeFactory;
    if (fbean == null) {
        return;
    }
    String s = fbean.creator.getColBatchDlgClass();
    switchDialog = (I_ColBatchDlg) app.getClassPool().getNewInstance(s, new StringBuffer());
    switchDialog.wfinit(this);
    if (switchDialog == null) {
        return;
    }

    switchDialog.setLocation(lastMouseClickPoint == null ? new Point(1, 1) : lastMouseClickPoint);
    Dimension dim = switchDialog.getPreferredSize();
//    dim.height += 20;
    switchDialog.setSize(dim);
    switchDialog.setVisible(true);
}//GEN-LAST:event_miBatchActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem miBatch;
    private javax.swing.JPopupMenu popOnRow;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean isCellEditable(int row, int column) {
        return (column == 1 || column == 5 || column == 6) && (row != 0);
    }

    private void wfinit() {
        getColumnModel().getColumn(1).setCellRenderer(getDefaultRenderer(Boolean.class));
        setOutFieldCellEditor(getColumnModel().getColumn(1));
        Uitool.alternateRowHighlighter_onJXTable(this);
        Uitool.setTableColumnWidths(this, ((QbTable_JTableModel) super.getModel()).getColWidths());
        JTextField jf=new JTextField();
        //只有像下面这样明确指定5,6列的编辑器，在插件中这两列才可以编辑
        getColumnModel().getColumn(5).setCellEditor(new DefaultCellEditor(jf));
        getColumnModel().getColumn(6).setCellEditor(new DefaultCellEditor(jf));
        // 
        dragSource = new DragSource();
        dragGestureRecognizer = dragSource.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_COPY, new MyDragListener());
        dropTarget = new DropTarget(this, new MyDropListener());
       
        //this.setCellEditor(new DefaultCellEditor(jf));
        
    }
    
    
    

    public void onPopDialogClosed() {
//        popDialog = null;
    }

    @Override
    public TableCellRenderer getCellRenderer(int row, int column) {
        TableCellRenderer r;
        if(row != 0){
            switch (column) {
                case 1:   // 开关
                    r = getSqlModel().getCellRenderer_sw((I_WfColumn) getValueAt(row, 0));
                    return r == null ? super.getCellRenderer(row, column) : r;
                case 7:   // 编辑风格
                    r = getSqlModel().getCellRenderer_estyle((I_WfColumn) getValueAt(row, 0));
                    return r == null ? super.getCellRenderer(row, column) : r;
                default:
                    return super.getCellRenderer(row, column);
            }
        }
        return new DefaultTableCellRenderer();
    }

    public void orderbySelectedFields(boolean b) {
        for (int row : this.getSelectedRows()) {
            if (b) {
                this.getModel().getOrderByFields().add(row);
            } else {
                getModel().getOrderByFields().remove(row);
            }
        }
        scene.sqlBuilderPanel.refreshSqlPreview(true);
    }

    public void groupbySelectedFields(boolean b) {
        for (int row : this.getSelectedRows()) {
            if (b) {
                this.getModel().getGroupByFields().add(row);
                
            } else {
                getModel().getGroupByFields().remove(row);
            }
        }
        scene.sqlBuilderPanel.refreshSqlPreview(true);
    }

    private void setOutFieldCellEditor(TableColumn column) {
        column.setCellEditor(getDefaultEditor(Boolean.class));
        CellEditorListener lis = new CellEditorListener() {
            @Override
            public void editingStopped(ChangeEvent e) {
//                // 输出变化，需要刷新SQL...
//                log.debug("e:%s,%s", e.getSource().getClass().getName(), e.getSource());
//                TableCellEditor editor = (TableCellEditor) e.getSource();
                getScene().sqlBuilderPanel.refreshSqlPreview(true);
            }

            @Override
            public void editingCanceled(ChangeEvent e) {
            }
        };
        column.getCellEditor().addCellEditorListener(lis);
    }

    public void refreshSqlPreview(boolean refillSqlModel) {

        scene.sqlBuilderPanel.refreshSqlPreview(refillSqlModel);
    }

    /**
     * @return the scene
     */
    public QbScene getScene() {
        return scene;
    }

    private SqlCreateModel getSqlModel() {
        return scene.getModel().getSqlModel();
    }
    //设置SQL预览可编辑性
    public void setSqlPreviewState(boolean b) {
        scene.sqlBuilderPanel.setSqlPreviewState(b);
    }
    //保存SQL预览
    public String getSqlPreview(){
        return scene.sqlBuilderPanel.getSqlPreview();
    }
    class MyDragListener implements DragSourceListener, DragGestureListener {

        @Override
        public void dragEnter(DragSourceDragEvent dsde) {
        }

        @Override
        public void dragOver(DragSourceDragEvent dsde) {
        }

        @Override
        public void dropActionChanged(DragSourceDragEvent dsde) {
        }

        @Override
        public void dragExit(DragSourceEvent dse) {
        }

        @Override
        public void dragDropEnd(DragSourceDropEvent dsde) {
        }

        @Override
        public void dragGestureRecognized(DragGestureEvent dge) {
            int row = getSelectedRow();
            if (row == -1) {
                return;
            }
            I_WfColumn col = (I_WfColumn) getModel().getValueAt(row, 0);
            //
            TransferableHashMap dh = new TransferableHashMap<String, Object>("QbTable");
            dh.put("table", getModel().getTbean().getTableDetail());
            dh.put("col", col);
//        StringSelection dh = new StringSelection(String.format("%s.%s", getModel().getTbean().alias, col.getSqlName()));
            try {
                dragSource.startDrag(dge, DragSource.DefaultCopyDrop, dh, this);    //_imgGhost, new Point(5, 5), transferable, this);
            } catch (InvalidDnDOperationException ex) {
                log.warn("%s error: %s - %s", this.getClass().getName(), ex.getClass().getName(), ex.toString());
            }
        }
    }

    class MyDropListener implements DropTargetListener {

        @Override
        public void dragEnter(DropTargetDragEvent dtde) {
        }

        @Override
        public void dragOver(DropTargetDragEvent dtde) {
        }

        @Override
        public void dropActionChanged(DropTargetDragEvent dtde) {
        }

        @Override
        public void dragExit(DropTargetEvent dte) {
        }

        @Override
        public void drop(DropTargetDropEvent dtde) {
            try {
                Transferable tr = dtde.getTransferable();
                DataFlavor[] flavors = tr.getTransferDataFlavors();
                for (int i = 0; i < flavors.length; i++) {
                    if (flavors[i].isMimeTypeEqual(DataFlavor.javaSerializedObjectMimeType)) { // .isFlavorJavaFileListType()) {
                        dtde.acceptDrop(DnDConstants.ACTION_COPY);
                        Object o = tr.getTransferData(flavors[i]);
                        if (o instanceof TransferableHashMap) {
                            TransferableHashMap m = (TransferableHashMap) o;
                            //            dh.put("model", getModel());
                            //            dh.put("col", col);
                            if ("WebUiMemBean".equals(m.getDndIdentify())) {
                                dropWebUiMemBean(dtde, m);
                            } else {
                                dropColumns(dtde, m);
                            }
                        } else {
                            log.warn("unknown transfered object in DND:%s. ignored.", o.getClass().getName());
                        }
                        dtde.dropComplete(true);
                        return;
                    }
                }
                dtde.dropComplete(false);
            } catch (Exception e) {
//                e.printStackTrace();
                log.error(com.bca.pub.tools.Toolfunc.getCallLocation(e.getStackTrace()) + ":" + e.getMessage(), e);
                try {
                    dtde.dropComplete(false);
                } catch (Exception ex) {
                }
            } finally {
            }
        }

        private void dropColumns(DropTargetDropEvent dtde, TransferableHashMap m) {
            Meta_Table stable = (Meta_Table) m.get("table");
            I_WfColumn scol = (I_WfColumn) m.get("col");
            if (stable == null || scol == null) {
                return;
            }
            int targetRow = QbJTable.this.rowAtPoint(dtde.getLocation());
            if (targetRow == -1) {
                return;
            }
//                            stable.getSchemaPrefixedSqlName();
            Meta_Table ttable = QbJTable.this.getModel().getTbean().getTableDetail();
            if (stable.getSqlName().equals(ttable.getSqlName())) {   // 同一个表，拒绝关联
                return;
            }

            I_WfColumn tcol = (I_WfColumn) QbJTable.this.getModel().getValueAt(targetRow, 0);
            boolean b = Wftool.confirmDialogFmt("表关联条件确认", "关联表: %s.%s = %s.%s",
                    stable.getSchemaPrefixedSqlName(), scol.getSqlName(),
                    ttable.getSchemaPrefixedSqlName(), tcol.getSqlName());
            if (!b) {
                return;
            }
            getScene().linkTables(stable, scol, ttable, tcol);
        }

        private void dropWebUiMemBean(DropTargetDropEvent dtde, TransferableHashMap m) {
            WebUiMemBean uiBean = (WebUiMemBean) m.get("WebUiMemBean");
            int row = QbJTable.this.rowAtPoint(dtde.getLocation());
            if (uiBean == null || row == -1) {
                return;
            }
//            Wftool.messageDialog(true, uiBean.toString());
            QbTable_JTableModel tm = QbJTable.this.getModel();
            I_WfColumn col = (I_WfColumn) tm.getValueAt(row, 0);
//            col.setEditStyle(uiBean);
//            tm.fillRow(row, col);

            getSqlModel().saveUiStyle(col.getSqlName(), uiBean);
        }
    }
}
